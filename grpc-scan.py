"""
GRPC-Scan
Extracting Methods, Services and Messages (Routes) in JS files (grpc-web)
"""

import re
from argparse import ArgumentParser


def extract_endpoints(content):
    pattern = r'MethodDescriptor\("(\/.*?)"'
    compiled_pattern = re.compile(pattern)
    matched_items = compiled_pattern.findall(content)
    matched_items = list(matched_items)
    print('Found Endpoints:')
    if matched_items:
        for m in matched_items:
            print("  " + m)

    print()


def extract_messages(content):
    pattern = r'proto\.(.*?)\.prototype\.set(.*?)='
    compiled_pattern = re.compile(pattern)
    matched_items = compiled_pattern.findall(content)
    matched_items = list(matched_items)

    message_list = {}

    print('Found Messages:')
    if matched_items:
        for m in matched_items:
            if m[0].strip() not in message_list:
                message_list[m[0]] = []
            if m[1].strip() not in message_list[m[0].strip()]:
                message_list[m[0]].append(m[1].strip())

        for m in message_list.keys():
            print("  " + m + ":")
            print("\t",end="")
            print("\n\t".join(message_list[m]))


def read_file(file):
    try:
        with open(file, 'r', encoding='utf-8') as file:
            return file.read()

    except Exception as e:
        print('Error occurred on opening file: ' + str(e))
        exit(1)


def print_parser_help(prog):
    help_msg = f"python3 {prog} --file main.js"
    print(help_msg)


if __name__ == "__main__":
    parser = ArgumentParser(usage='python3 %(prog)s --file main.js',
                            allow_abbrev=False, add_help=False)

    parser.add_argument('--help', action='store_true', default=False)
    parser.add_argument('--file')

    args, unknown = parser.parse_known_args()

    if (args.help is True) or (args.file is None):
        print_parser_help(prog=parser.prog)
        exit(0)

    js_content = read_file(args.file)
    extract_endpoints(js_content)
    extract_messages(js_content)
